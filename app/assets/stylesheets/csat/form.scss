input.multiple-choice {
    display: inline;
}
.hidden {
    display: none;
}
$govuk-spacing-1: 5px;
$govuk-spacing-2: 10px;
$govuk-spacing-3: 15px;
$govuk-spacing-6: 30px;
$govuk-touch-target-gutter: 4px;
$govuk-radios-size: 40px;
$govuk-checkboxes-size: 40px;
$govuk-checkboxes-label-padding-left-right: $govuk-spacing-3;
$govuk-checkbox-check-horizontal-position: 10px;
$govuk-touch-target-size: ($govuk-radios-size + $govuk-touch-target-gutter);
$govuk-small-radios-size: 24px;
$govuk-radios-label-padding-left-right: $govuk-spacing-3;
// When the default focus width is used on a curved edge it looks visually
// smaller. So for the circular radios we bump the default to make it look
// visually consistent.
$govuk-focus-width: 3px;
$govuk-radios-focus-width: $govuk-focus-width + 1px;
$govuk-border-width-form-element: 2px;
$govuk-radios-label-padding-left-right: $govuk-spacing-3;


.hcsat {
    * fieldset {
        border: none;
    }
    * textarea {
        margin-bottom:0px;
    }
}


.hcsat__submission_confirmation_container {
    display:inline-flex;
}

.abc {
    font-size: 20px;
}

.hcsat__heading {
    font-size: 18px;
    font-weight: 600;
    line-height: 25px;
}

.hcsat__submission_confirmation {
    @extend .hcsat__heading;
    padding-left: $govuk-spacing-2;
    margin-top: $govuk-spacing-6;
    margin-bottom: $govuk-spacing-6;
}

.hcsat__body_text {
    font-size: 18px;
    font-weight: 400;
    line-height: 25px;
}

.hcsat__caption {
    color: #505A5F;
    font-size: 18px;
    line-height: 25px;
    font-weight: 400; 
}

.hcsat__radios_input, .hcsat__checkboxes_input {
    z-index: 1;
    width: $govuk-touch-target-size;
    height: $govuk-touch-target-size;
    margin: 0;
    opacity: 0;
    cursor: pointer;
}

.hcsat__radios_label {
    align-self: center;

    // Ensure that the width of the label is never more than the width of the
    // container minus the input width minus the padding on either side of
    // the label. This prevents the label from going onto the next line due to
    // __item using flex-wrap because we want hints on a separate line
    max-width: calc(100% - #{($govuk-radios-label-padding-left-right + $govuk-touch-target-size + $govuk-spacing-3)});
    margin-bottom: 0;
    padding: ($govuk-spacing-1 + $govuk-border-width-form-element) $govuk-spacing-1;
    cursor: pointer;
    // remove 300ms pause on mobile
    touch-action: manipulation;

    &::before {
        content: "";
        box-sizing: border-box;
        position: absolute;
        top: ($govuk-touch-target-gutter / 2);
        left: ($govuk-touch-target-gutter / 2);
        width: $govuk-radios-size;
        height: $govuk-radios-size;
        border: $govuk-border-width-form-element solid black;
        border-radius: 50%;
        background: transparent;
      }

    &::after {
        $radio-button-size: $govuk-spacing-2;
    
        content: "";
        position: absolute;
    
        // Positioned by getting half the touch target, so we have the centre of the
        // input, and then moving back by the button's border width, thus positioning
        // the centre of the button in the centre of the input.
        top: ($govuk-touch-target-size / 2) - $radio-button-size;
        left: ($govuk-touch-target-size / 2) - $radio-button-size;
        width: 0;
        height: 0;
        border: $radio-button-size solid black;
        border-radius: 50%;
        opacity: 0;
        background: black;
      }
}

 // Focused state
 .hcsat__radios_input:focus + .hcsat__radios_label::before {
    border-width: 4px;

    // When colours are overridden, the yellow box-shadow becomes invisible
    // which means the focus state is less obvious. By adding a transparent
    // outline, which becomes solid (text-coloured) in that context, we ensure
    // the focus remains clearly visible.
    outline: $govuk-focus-width solid transparent;
    outline-offset: 1px;

    // When in an explicit forced-color mode, we can use the Highlight system
    // color for the outline to better match focus states of native controls
    //@media screen and (forced-colors: active), (-ms-high-contrast: active) {
    //  outline-color: Highlight;
    //}

    box-shadow: 0 0 0 $govuk-radios-focus-width yellow;
  }

  // Selected state
  .hcsat__radios_input:checked + .hcsat__radios_label::after {
    opacity: 1;
  }

.hcsat__radios_item, .hcsat__checkboxes_item{
    display:flex;
    flex-wrap: wrap;
    position: relative;
    margin-bottom: $govuk-spacing-2;
}

.hcsat__checkboxes_label {
    align-self: center;

    // Ensure that the width of the label is never more than the width of the
    // container minus the input width minus the padding on either side of
    // the label. This prevents the label from going onto the next line due to
    // __item using flex-wrap because we want hints on a separate line.
    max-width: calc(100% - #{(($govuk-checkboxes-label-padding-left-right * 2) + $govuk-touch-target-size)});
    margin-bottom: 0;
    padding: ($govuk-spacing-1 + $govuk-border-width-form-element) $govuk-spacing-3;
    cursor: pointer;
    // remove 300ms pause on mobile
    touch-action: manipulation;

    &::before {
        content: "";
        box-sizing: border-box;
        position: absolute;
        top: ($govuk-touch-target-gutter / 2);
        left: ($govuk-touch-target-gutter / 2);
        width: $govuk-checkboxes-size;
        height: $govuk-checkboxes-size;
        border: $govuk-border-width-form-element solid currentcolor;
        background: transparent;
      }

      &::after {
        content: "";
        box-sizing: border-box;
        position: absolute;
    
        // Use "magic numbers" to define shape and position of check mark because
        // the complexity of the shape makes it difficult to calculate dynamically.
        top: 13px;
        left: $govuk-checkbox-check-horizontal-position;
        width: 23px;
        height: 12px;
        transform: rotate(-45deg);
        border: solid;
        border-width: 0 0 5px 5px;
        // Fix bug in IE11 caused by transform rotate (-45deg).
        // See: alphagov/govuk_elements/issues/518
        border-top-color: transparent;
        opacity: 0;
        background: transparent;
      }
  }

  // Focused state
  .hcsat__checkboxes_input:focus + .hcsat__checkboxes_label::before {
    border-width: 4px;

    // When colours are overridden, the yellow box-shadow becomes invisible
    // which means the focus state is less obvious. By adding a transparent
    // outline, which becomes solid (text-coloured) in that context, we ensure
    // the focus remains clearly visible.
    outline: $govuk-focus-width solid transparent;
    outline-offset: 1px;

    // When in an explicit forced-color mode, we can use the Highlight system
    // color for the outline to better match focus states of native controls
    //@media screen and (forced-colors: active), (-ms-high-contrast: active) {
    //  outline-color: Highlight;
    //}

    box-shadow: 0 0 0 $govuk-focus-width yellow;
  }

  // Selected state
  .hcsat__checkboxes_input:checked + .hcsat__checkboxes_label::after {
    opacity: 1;
  }
.govuk-margin-bottom-1 {
    margin-bottom: 5px;
}

.govuk-margin-top-1 {
    margin-top: 5px;
}


.govuk-margin-bottom-2 {
    margin-bottom: 10px;
}

.govuk-margin-top-2 {
    margin-top: 10px;
}

.govuk-margin-bottom-4 {
    margin-bottom: 20px;
}

.govuk-margin-top-4 {
    margin-top: 20px;
}



.govuk-margin-bottom-6 {
    margin-bottom: 20px;

    @media (min-width: 641px) {
        margin-bottom: 30px;
    }
}

.govuk-margin-top-6 {
    margin-top: 20px;

    @media (min-width: 641px) {
        margin-top: 30px;
    }
}
.hcsat__checkboxes_conditional {
    margin-left: 20px;
    padding-left: 35px;
    border-left: 4px solid #bdbdbd;
    margin-bottom: 20px;
}
