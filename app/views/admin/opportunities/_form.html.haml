- form = FormPresenter.new(content, @process)
- content_for :action_specific_head  do
  = stylesheet_link_tag 'transformation_admin/pages/opportunity'
  = javascript_include_tag 'transformation_admin/dit.page.opportunity'



.errors
  - if opportunity.errors.any?
    %p#errors-list-label
      = pluralize(opportunity.errors.count, 'error')
      prevented this opportunity from being saved:
    %ul{'aria-labelledby': 'errors-list-label'}
      - opportunity.errors.full_messages.each do |message|
        %li= message



= form_for [:admin, opportunity], :builder => TemplateFormBuilder do |f|

  %fieldset
    %legend.group= content['group_1_title']
    = render partial: "forms/input_radio", locals: { input: form.input_radio('types') }
    = render partial: "forms/input_radio", locals: { input: form.input_radio('tender') }

  %input{:type=>'submit', :value=>form.content['save_continue'], :class=>'button'}
  %input{:type=>'submit', :value=>form.content['save_draft'], :class=>'button'}


  %fieldset
    %legend.group= content['group_2_title']
    %p= content['group_2_description']
    = f.input_text :title, form.input_text('title'), { maxlength: '80' }
    = f.input_text :teaser, form.input_text('teaser'), { maxlength: '150' }

    = render partial: "forms/input_radio", locals: { input: form.input_radio('usage') }

    = f.input_textarea :description, form.input_textarea('description'), { rows: '12' }
    = f.input_radio :value_ids, form.input_radio('values', @values)
    = f.input_select :country_ids, form.input_select('countries', @countries), { multiple: true, size: '5', data: { node: 'countries', unselected: content['countries_unselected'], display: content['countries_selected_title'] } }

    = f.input_select :sector_ids, form.input_select('sector_ids', @sectors), { multiple: true, size: '5', data: { node: 'sectors', unselected: content['sectors_unselected'], display: content['sectors_selected_title'] } }

    = render partial: "forms/input_checkbox_group", locals: { group: form.input_checkbox_group('organisation') }
    = render partial: "forms/input_checkbox_group", locals: { group: form.input_checkbox_group('talk_to') }
    = render partial: "forms/input_text", locals: { input: form.input_text('commodity_codes') }

    = f.input_date_month_year :response_due_on, form.input_date_month_year('response_due_on')

    -#= form.build_input_select field, :service_provider_id, @service_providers, required: true
    = f.output_value :service_provider_id, form.input_label('service_provider_id').merge({ value: 'France - Paris' }), data: { node: 'service-provider' }

    = f.input_text :target_url, form.input_text('target_url'), data: { node: 'target-url' }

    = render partial: "forms/input_radio", locals: { input: form.input_radio('next_step_for_customers') }


  = f.fields_for :contacts do |field|
    = field.input_text :name, form.input_text("contact_#{field.index + 1}_name")
    = field.input_text :email, form.input_text("contact_#{field.index + 1}_email"), required: true


  %input{:type=>'submit', :value=>form.content['submit_create'], :class=>'button'}

  - if current_page?(action: 'new') || true
    %input{:type=>'submit', :value=>form.content['submit_draft'], :class=>'button draft'}



-# TODO: Do we keep this?

  - if policy(opportunity).show_ragg? && opportunity.id.present?
    %h2 Triage rating
    %fieldset
      %legend Set the rating: Red to indicate rejection, Amber to indicate editing required, Blue to indicate special consideration required.
      .multiple-choice.ragg_choice-red
        = f.radio_button :ragg, :red, id: 'radio-inline-1', 'autocomplete': 'off'
        %label{:for => "radio-inline-1"} Red
      .multiple-choice.ragg_choice-amber
        = f.radio_button :ragg, :amber, id: 'radio-inline-2', 'autocomplete': 'off'
        %label{:for => "radio-inline-2"} Amber
      .multiple-choice.ragg_choice-green
        = f.radio_button :ragg, :green, id: 'radio-inline-3', 'autocomplete': 'off'
        %label{:for => "radio-inline-3"} Green
      .multiple-choice.ragg_choice-blue
        = f.radio_button :ragg, :blue, id: 'radio-inline-4', 'autocomplete': 'off'
        %label{:for => "radio-inline-4"} Blue


  = f.submit class: 'button'
  - if current_page?(action: 'new') && @save_to_draft_button
    = f.submit 'Save to Draft', class: 'button button-draft'
