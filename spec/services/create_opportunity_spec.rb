require 'rails_helper'
require 'spec_helper'

describe CreateOpportunity, type: :service do
  describe '#call' do
    before do
      country = create(:country, id: '1')
      create(:sector, id: '2')
      create(:sector, id: '5')
      create(:type, id: '3')
      create(:value, id: '4')
      @service_provider = create(:service_provider, id: '5', country: country)
      @editor = create(:editor, service_provider: @service_provider)
    end

    it 'creates a new opportunity' do
      service_provider = create(:service_provider, id: '6')
      editor = create(:editor, service_provider_id: service_provider.id)

      expect { CreateOpportunity.new(editor).call(opportunity_params) }
        .to change { Opportunity.count }.by(1)
    end

    it 'creates a new custom target URL opportunity without target_url (target_url is optional)' do
      service_provider = create(:service_provider, name: 'DFID')
      editor = create(:editor, service_provider_id: service_provider.id)

      expect { CreateOpportunity.new(editor).call(opportunity_params(title: 'DFID title', service_provider_id: service_provider.id)) }
          .to change { Opportunity.count }.by(1)
    end

    it 'does NOT create a new custom target URL opportunity with invalid URL scheme target_url' do
      service_provider = create(:service_provider, name: 'DFID')
      editor = create(:editor, service_provider_id: service_provider.id)

      opportunity_params = opportunity_params(title: 'DFID title', service_provider_id: service_provider.id)
      opportunity_params[:target_url] = 'http:// great gov uk'
      expect { CreateOpportunity.new(editor).call(opportunity_params) }
          .to change { Opportunity.count }.by(0)
    end

    it 'creates a new custom target URL opportunity with a valid URL scheme target_url' do
      service_provider = create(:service_provider, name: 'DFID')
      editor = create(:editor, service_provider_id: service_provider.id)

      opportunity_params = opportunity_params(title: 'DFID title', service_provider_id: service_provider.id)
      opportunity_params[:target_url] = 'https://supplierportal.dfid.gov.uk/selfservice/pages/public/viewPublicNotice.cmd?bm90aWNlSWQ9NzIzMDA%3D'

      expect { CreateOpportunity.new(editor).call(opportunity_params) }
          .to change { Opportunity.count }.by(1)
    end

    it 'returns an opportunity' do
      opportunity = CreateOpportunity.new(@editor).call(opportunity_params)

      expect(opportunity).to be_a Opportunity
    end

    it 'sets status as pending' do
      opportunity = CreateOpportunity.new(@editor).call(opportunity_params)

      expect(opportunity.status).to eq 'pending'
    end

    it 'assigns the editor as the author' do
      opportunity = CreateOpportunity.new(@editor).call(opportunity_params)

      expect(opportunity.author).to eq @editor
    end

    it "creates a slug from an opportunity's title" do
      params = opportunity_params(title: 'Export Great Britain to Great Nations For Fun & Profit!')
      opportunity = CreateOpportunity.new(@editor).call(params)
      expect(opportunity.slug).to eq 'export-great-britain-to-great-nations-for-fun-profit'
    end

    it 'ensures an editor-entered slug is in the right format' do
      params = opportunity_params.merge(slug: 'badly formatted SLUG')

      opportunity = CreateOpportunity.new(@editor).call(params)

      expect(opportunity.slug).to eql 'badly-formatted-slug'
    end

    context 'can add Sectors by CPV code' do
      
      before do
        # Mock the external API; this API is tested elsewhere
        allow_any_instance_of(CategorisationMicroservice).to receive(:sector_ids).and_return([2, 5])
      end

      it 'if CPV code provided' do
        # Remove sector code - must be generated by CPV code only
        params_without_sector = opportunity_params.except(:sector_ids)
        opportunity = CreateOpportunity.new(@editor).call(params_without_sector)
        expect(opportunity.sectors.count).to eq 2
      end

      it 'if CPV code provided but does not duplicate sectore from microservice' do
        allow_any_instance_of(CategorisationMicroservice).to receive(:sector_ids).and_return([2, 2, 2, 5])

        params_without_sector = opportunity_params.except(:sector_ids)
        opportunity = CreateOpportunity.new(@editor).call(params_without_sector)
        expect(opportunity.sectors.count).to eq 2
      end

      it 'unless CPV code not provided' do
        params_without_cpv_or_sector = 
          opportunity_params(opportunity_cpvs: nil).except(:sector_ids)
        opportunity = CreateOpportunity.new(@editor).call(params_without_cpv_or_sector)
        expect(opportunity.sectors.count).to eq 0
      end
    end
  end
end
